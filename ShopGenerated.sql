
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.buy
(
    buy_id integer NOT NULL DEFAULT nextval('buy_buy_id_seq'::regclass),
    client_id integer NOT NULL,
    CONSTRAINT buy_pkey PRIMARY KEY (buy_id)
);

CREATE TABLE IF NOT EXISTS public.client
(
    client_id integer NOT NULL DEFAULT nextval('client_client_id_seq'::regclass),
    client_name character varying(100) COLLATE pg_catalog."default",
    client_birthday date,
    city_id integer NOT NULL,
    CONSTRAINT client_pkey PRIMARY KEY (client_id)
);

CREATE TABLE IF NOT EXISTS public.city
(
    city_id integer NOT NULL DEFAULT nextval('city_city_id_seq'::regclass),
    city_name character varying(100) COLLATE pg_catalog."default",
    city_days_delivery integer NOT NULL,
    CONSTRAINT city_pkey PRIMARY KEY (city_id)
);

CREATE TABLE IF NOT EXISTS public.store
(
    store_id integer NOT NULL DEFAULT nextval('store_store_id_seq'::regclass),
    city_id integer NOT NULL,
    store_adress character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT store_pkey PRIMARY KEY (store_id)
);

CREATE TABLE IF NOT EXISTS public.product
(
    product_id integer NOT NULL DEFAULT nextval('product_product_id_seq'::regclass),
    product_name character varying(500) COLLATE pg_catalog."default",
    product_rate numeric(2, 1) DEFAULT 0,
    amount integer NOT NULL,
    price numeric NOT NULL,
    store_id integer NOT NULL,
    category_id integer NOT NULL,
    supplier_id integer NOT NULL,
    CONSTRAINT product_pkey PRIMARY KEY (product_id)
);

CREATE TABLE IF NOT EXISTS public.category
(
    category_id integer NOT NULL DEFAULT nextval('category_category_id_seq'::regclass),
    category_name character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT category_pkey PRIMARY KEY (category_id)
);

CREATE TABLE IF NOT EXISTS public.supplier
(
    supplier_id integer NOT NULL DEFAULT nextval('supplier_supplier_id_seq'::regclass),
    supplier_name character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT supplier_pkey PRIMARY KEY (supplier_id)
);

CREATE TABLE IF NOT EXISTS public.buy_product
(
    buy_product_id integer NOT NULL DEFAULT nextval('buy_product_buy_product_id_seq'::regclass),
    buy_id integer NOT NULL,
    product_id integer NOT NULL,
    buy_product_rate numeric(2, 1) DEFAULT NULL::numeric,
    amount integer NOT NULL,
    CONSTRAINT buy_product_pkey PRIMARY KEY (buy_product_id)
);

CREATE TABLE IF NOT EXISTS public.buy_step
(
    buy_step_id integer NOT NULL DEFAULT nextval('buy_step_buy_step_id_seq'::regclass),
    buy_id integer NOT NULL,
    step_id integer NOT NULL,
    step_date_beg date,
    step_date_end date,
    CONSTRAINT buy_step_pkey PRIMARY KEY (buy_step_id)
);

CREATE TABLE IF NOT EXISTS public.step
(
    step_id integer NOT NULL DEFAULT nextval('step_step_id_seq'::regclass),
    step_name character varying(30) COLLATE pg_catalog."default",
    CONSTRAINT step_pkey PRIMARY KEY (step_id)
);

ALTER TABLE IF EXISTS public.buy
    ADD CONSTRAINT buy_client_id_fkey FOREIGN KEY (client_id)
    REFERENCES public.client (client_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.client
    ADD CONSTRAINT client_city_id_fkey FOREIGN KEY (city_id)
    REFERENCES public.city (city_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.store
    ADD CONSTRAINT store_city_id_fkey FOREIGN KEY (city_id)
    REFERENCES public.city (city_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.product
    ADD CONSTRAINT product_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.category (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.product
    ADD CONSTRAINT product_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES public.store (store_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.product
    ADD CONSTRAINT product_supplier_id_fkey FOREIGN KEY (supplier_id)
    REFERENCES public.supplier (supplier_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.buy_product
    ADD CONSTRAINT buy_product_buy_id_fkey FOREIGN KEY (buy_id)
    REFERENCES public.buy (buy_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.buy_product
    ADD CONSTRAINT buy_product_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.buy_step
    ADD CONSTRAINT buy_step_buy_id_fkey FOREIGN KEY (buy_id)
    REFERENCES public.buy (buy_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.buy_step
    ADD CONSTRAINT buy_step_step_id_fkey FOREIGN KEY (step_id)
    REFERENCES public.step (step_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;

INSERT INTO city (city_name, city_days_delivery) VALUES
    ('Москва', 14),
    ('Казань', 30),
    ('Уфа', 60),
    ('Ижевск', 60),
    ('Санкт-Петербург', 30);

INSERT INTO store (city_id, store_adress) VALUES
    (1, 'Дубосековская, 5');

INSERT INTO client VALUES
    (DEFAULT, 'Ашот', '2000-10-05', 1),
    (DEFAULT, 'Billy', '1997-07-06' , 3),
    (DEFAULT, 'Паштет', '1999-12-31', 2),
    (DEFAULT, 'Van', '2003-07-07', 4),
    (DEFAULT, 'Джонни', '1995-05-06', 5);

INSERT INTO category (category_name) VALUES
    ('Вафли'),
    ('Мармелад'),
    ('Плиточный шоколад'),
    ('Конфеты'),
    ('Лакрица'),
    ('Печенье');

INSERT INTO supplier (supplier_name) VALUES
    ('Черноголовка'),
    ('Яшкино'),
    ('Babyfox'),
    ('Холдинг «Объединенные кондитеры»'),
    ('MARS Wrigley'),
    ('Мармеладыч'),
    ('TONDI');

INSERT INTO product (product_name, amount, price, store_id, category_id, supplier_id) VALUES
    ('Конфеты со вкусом Баббл гам', 40, 49.99, 1, 4, 1),
    ('Шоколад молочный «Cherry Cola»', 14, 109.99, 1, 3, 1),
    ('Конфеты Одуванчик', 18, 399.89, 1, 4, 1),
    ('Вафли «Голландские», с карамельной начинкой', 33, 89.90, 1, 1, 2),
    ('Шоколад молочный с крекером', 7, 44.5, 1, 3, 2),
    ('Вафельные трубочки «Со вкусом сгущённого молока»', 12, 67.79, 1, 1, 2),
    ('Мармелад жевательный', 30, 34.6, 1, 2, 3),
    ('Конфеты mini с фундуком', 70, 450, 1, 4, 3),
    ('Конфеты Creamy', 42, 340, 1, 4, 3),
    ('Конфеты Сибирский сувенир', 39, 600, 1, 4, 4),
    ('Мармелад Сладкая карусель', 21, 65, 1, 2, 4),
    ('Молочный шоколад Аленка', 23, 70, 1, 3, 4),
    ('Milky Way Minis', 87, 620, 1, 4, 5),
    ('Коркунов горький шоколад', 60, 110, 1, 3, 5),
    ('Ирис Золотой ключик', 10, 152, 1, 4, 4),
    ('Сливочная помадка', 33, 154, 1, 4, 4),
    ('Шоколад Вдохновение с миндалем', 28, 204, 1, 3, 4),
    ('Конфеты вафельные Bueno', 32, 80, 1, 1, 3),
    ('Батончик вафельный Babyfox Roxy', 25, 10, 1, 1, 3),
    ('Ирис Сливочный', 21, 197, 1, 4, 2),
    ('Dove молочный шоколад с изюмом', 20, 92, 1, 3, 5),
    ('Мармелад кислый ассорти', 120, 800, 1, 2, 6),
    ('Лакрица ассорти', 210, 1000, 1, 5, 6),
    ('Тропический червяк Кузя', 7, 3560, 1, 2, 6),
    ('Печенье-сэндвич с шоколадно-сливочным вкусом', 187, 60, 1, 6, 7),
    ('Печенье-сэндвич с клубнично-сливочным вкусом', 212, 65, 1, 6, 7),
    ('Эклеры сливочные', 103, 120, 1, 6, 7);

INSERT INTO step (step_name) VALUES
    ('Оплата'),
    ('Упаковка'),
    ('Доставка'),
    ('Возврат');

INSERT INTO buy (client_id) VALUES
    (1),
    (2),
    (3),
    (4),
    (3),
    (5),
    (1),
    (5),
    (3),
    (1),
    (2),
    (2),
    (4),
    (5),
    (4);


INSERT INTO buy_product (buy_id, product_id, buy_product_rate, amount) VALUES
    (1, 1, 1, 7),
    (1, 9, 2, 15),
    (1, 13, 3, 12),
    (2, 4, 4, 3),
    (3, 11, 5, 1),
    (3, 7, 5, 3),
    (4, 19, 4, 5),
    (4, 21, 3, 5),
    (5, 3, 2, 5),
    (5, 4, 5, 5),
    (5, 12, 4, 5),
    (6, 18, 5, 5),
    (6, 10, 4, 5),
    (7, 8, 5, 5),
    (8, 20, 5, 5),
    (8, 2, 5, 5),
    (9, 5, 5, 7),
    (9, 19, 5, 5),
    (10, 16, 4, 22),
    (11, 17, 5, 5),
    (12, 6, 4, 11),
    (12, 9, 5, 1),
    (12, 21, 5, 5),
    (12, 11, 4, 8),
    (13, 14, 5, 4),
    (13, 15, 5, 5),
    (14, 3, 5, 5),
    (14, 1, 4, 9),
    (14, 15, 4, 5),
    (15, 7, 5, 5);

/*
    
    Если шаг, на котором находится заказ, еще не завершен то в step_date_end ставить NULL
    Время доставки - шага 3 - не должно сильно отличаться от кол-ва дней в таблице city
*/
INSERT INTO buy_step (buy_id, step_id, step_date_beg, step_date_end) VALUES
    (1, 1, '2023-06-06', '2023-06-07'),
    (1, 2, '2023-06-07', '2023-06-09'),
    (1, 3, '2023-06-09', '2023-07-09'),
    (3, 1, '2023-06-08', '2023-06-11'),
    (3, 2, '2023-06-11', '2023-06-12'),
    (3, 3, '2023-06-12', '2023-07-09'),
    (3, 4, '2023-07-09', NULL),
    (2, 1, '2023-06-09', '2023-06-10'),
    (2, 2, '2023-06-10', NULL),
    (4, 1, '2023-06-05', '2023-06-07'),
    (4, 2, '2023-06-07', '2023-06-09'),
    (5, 1, '2023-06-10', '2023-06-12'),
    (5, 2, '2023-06-12', NULL),
    (6, 1, '2023-06-11', '2023-06-13'),
    (6, 2, '2023-06-13', '2023-06-15'),
    (6, 3, '2023-06-15', NULL),
    (7, 1, '2023-06-14', '2023-06-15'),
    (7, 2, '2023-06-15', NULL),
    (8, 1, '2023-06-16', '2023-06-18'),
    (8, 2, '2023-06-18', '2023-07-16'),
    (8, 3, '2023-07-16', '2023-09-15'),
    (8, 4, '2023-07-18', NULL),
    (9, 1, '2023-06-17', '2023-06-18'),
    (9, 2, '2023-06-18', NULL),
    (10, 1, '2023-06-20', '2023-06-21'),
    (10, 2, '2023-06-21', '2023-06-22'),
    (10, 3, '2023-06-22', NULL),
    (11, 1, '2023-06-23', '2023-06-24'),
    (11, 2, '2023-06-24', '2023-06-26'),
    (11, 3, '2023-06-26', NULL),
    (12, 1, '2023-06-27', '2023-06-28'),
    (12, 2, '2023-06-28', NULL),
    (13, 1, '2023-06-30', '2023-07-01'),
    (13, 2, '2023-07-01', '2023-07-02'),
    (13, 3, '2023-07-02', '2023-07-16'),
    (13, 4, '2023-07-16', NULL),
    (14, 1, '2023-07-05', '2023-07-06'),
    (14, 2, '2023-07-06', NULL),
    (15, 1, '2023-07-07', '2023-07-08'),
    (15, 2, '2023-07-08', '2023-07-09'),
    (15, 3, '2023-07-09', '2023-07-23');